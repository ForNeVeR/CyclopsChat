<?xml version="1.0"?>
<doc>
    <assembly>
        <name>muzzle</name>
    </assembly>
    <members>
        <member name="T:muzzle.ChatHistory">
            <summary>
            Keep track of the history of a conversation or room.
            </summary>
        </member>
        <member name="T:muzzle.BottomScrollRichText">
            <summary>
            Summary description for BottomScrollRichText.
            </summary>
        </member>
        <member name="F:muzzle.BottomScrollRichText.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.#ctor">
            <summary>
            Create a RichText that can scroll to the bottom easily.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.WndProc(System.Windows.Forms.Message@)">
            <summary>
            The message pump.  Overriden to catch the WM_VSCROLL events.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:muzzle.BottomScrollRichText.ClearAndScroll">
            <summary>
            Clear the text, and scroll back to the top.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.ScrollToBottom">
            <summary>
            Scroll to the bottom of the current text.
            </summary>
        </member>
        <member name="M:muzzle.BottomScrollRichText.AppendText(System.Drawing.Color,System.String)">
            <summary>
            Append text with the given color to the end of the text area.
            Side effect: the existing selection is modified.  Save the selection
            if you want to keep it.
            </summary>
            <param name="c"></param>
            <param name="text"></param>
        </member>
        <member name="M:muzzle.BottomScrollRichText.AppendMaybeScroll(System.String)">
            <summary>
            Append text.  If we were at the bottom, scroll to the bottom.  Otherwise leave the scroll position
            where it is.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:muzzle.BottomScrollRichText.AppendMaybeScroll(System.Drawing.Color,System.String,System.String)">
             <summary>
             Add a line that has a colored tag string, followed by a space, followed by
             a chunk of text in the default color, followed by a newline.
            
             Note: Although this seems kind of random, it's needed in several places.
             </summary>
             <param name="tagColor">The color to use for the tag</param>
             <param name="tag">The tag string</param>
             <param name="text">The main text</param>
        </member>
        <member name="P:muzzle.BottomScrollRichText.MaxLines">
            <summary>
            Maximum number of lines to keep
            </summary>
        </member>
        <member name="P:muzzle.BottomScrollRichText.IsAtBottom">
            <summary>
            Is the text currently scrolled to the bottom?
            </summary>
        </member>
        <member name="M:muzzle.ChatHistory.#ctor">
            <summary>
            Create.  Make sure to set Client and From, at least.
            </summary>
        </member>
        <member name="M:muzzle.ChatHistory.InsertMessage(jabber.protocol.client.Message)">
            <summary>
            Insert the given message into the history.  The timestamp on the message will be used, if
            included, otherwise the current time will be used.
            Messages without bodies will be ignored.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:muzzle.ChatHistory.InsertSend(System.String)">
            <summary>
            We sent some text; insert it.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:muzzle.ChatHistory.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:muzzle.ChatHistory.Nickname">
            <summary>
            Nickname for the associated user.  If null, the resource will be used (e.g. MUC).
            </summary>
        </member>
        <member name="T:muzzle.OptionForm">
            <summary>
            Base class for forms that configure XmppStream subclasses.
            </summary>
        </member>
        <member name="F:muzzle.OptionForm.tip">
            <summary>
            ToolTips.
            </summary>
        </member>
        <member name="F:muzzle.OptionForm.error">
            <summary>
            Error notifications.
            </summary>
        </member>
        <member name="M:muzzle.OptionForm.#ctor">
            <summary>
            Create new form
            </summary>
        </member>
        <member name="M:muzzle.OptionForm.#ctor(jabber.connection.XmppStream)">
            <summary>
            Create new form.
            </summary>
            <param name="xmpp"></param>
        </member>
        <member name="M:muzzle.OptionForm.WriteXmpp">
            <summary>
            Write to the XmppStream the current values.
            </summary>
        </member>
        <member name="M:muzzle.OptionForm.Configure(jabber.connection.XmppStream)">
            <summary>
            Write the configuration values to the given XmppStream.
            </summary>
            <param name="stream">The stream to configure</param>
        </member>
        <member name="M:muzzle.OptionForm.WriteToFile(System.String)">
            <summary>
            Write the current connection properties to an XML config file.
            TODO: Replace this with a better ConfigFile implementation that can write.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:muzzle.OptionForm.ReadXmpp">
            <summary>
            Read current values from the XmppStream
            </summary>
        </member>
        <member name="M:muzzle.OptionForm.Login(System.String)">
            <summary>
            Read connection properties from the given file,
            pop up the dialog to see if the user wants to change them,
            save the changes, and
            connect to the server.
            </summary>
            <param name="propertyFile">The name of the file to store connection information in.</param>
            <returns>True if the user hit OK, otherwise false</returns>
        </member>
        <member name="M:muzzle.OptionForm.ReadFromFile(System.String)">
            <summary>
            Set the connection properties from an XML config file.
            TODO: Replace this with a better ConfigFile implementation that can write.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:muzzle.OptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:muzzle.OptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.OptionForm.Required(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This field is required.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:muzzle.OptionForm.ClearError(System.Object,System.EventArgs)">
            <summary>
            Clear any error blinkies.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:muzzle.OptionForm.Xmpp">
            <summary>
            The client connection to manage
            </summary>
        </member>
        <member name="P:muzzle.OptionForm.Item(System.String)">
            <summary>
            Set/Get the value of an option, as it currently exists in a control.
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:muzzle.JidMulti">
            <summary>
            Summary description for JidMulti.
            </summary>
        </member>
        <member name="M:muzzle.JidMulti.#ctor">
            <summary>
            Create a JidMulti control
            </summary>
        </member>
        <member name="M:muzzle.JidMulti.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.JidMulti.AddRange(System.Object[])">
            <summary>
            Add a range of JIDs or strings to the list.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:muzzle.JidMulti.GetValues">
            <summary>
            Get the list of JIDs in the control currently.
            </summary>
            <returns></returns>
        </member>
        <member name="M:muzzle.JidMulti.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:muzzle.LitmusColorScheme">
            <summary>
            How should colors be picked?
            </summary>
        </member>
        <member name="F:muzzle.LitmusColorScheme.Blue">
            <summary>
            Just shades of blue
            </summary>
        </member>
        <member name="F:muzzle.LitmusColorScheme.Multicolor">
            <summary>
            More colors for non-ASCII
            </summary>
        </member>
        <member name="T:muzzle.Litmus">
             <summary>
             Litmus is like StripChart, but shows a graphical representation of protocol going by.
             This was inspired by DW &amp; Craig&apos;s suggestion that the next generation protocol should
             just be shades of blue.
            
             Good gracious.  Did I really take the time to write this?
             </summary>
        </member>
        <member name="F:muzzle.Litmus.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:muzzle.Litmus.#ctor">
            <summary>
            Create a new Litmus object
            </summary>
        </member>
        <member name="M:muzzle.Litmus.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.Litmus.Clear">
            <summary>
            Clear all data in the window
            </summary>
        </member>
        <member name="M:muzzle.Litmus.AddText(System.String)">
            <summary>
            Add a string to the window.  Each byte will become roughly a
            pixel with color based on the byte's value.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:muzzle.Litmus.AddBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add bytes to the window.  Each byte will become roughly a
            pixel with color based on the byte's value.
            </summary>
            <param name="buf"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:muzzle.Litmus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:muzzle.Litmus.ColorScheme">
            <summary>
            Color scheme to use.
            </summary>
        </member>
        <member name="P:muzzle.Litmus.History">
            <summary>
            Number of points to show.  -1 means all
            </summary>
        </member>
        <member name="P:muzzle.Litmus.Paused">
            <summary>
            Don't update the display for now.  Useful for bulk loads.
            </summary>
        </member>
        <member name="T:muzzle.XDataForm">
            <summary>
            Summary description for XData.
            </summary>
        </member>
        <member name="M:muzzle.XDataForm.#ctor">
            <summary>
            Create an x:data form with no contents.
            </summary>
        </member>
        <member name="M:muzzle.XDataForm.#ctor(jabber.protocol.client.Message)">
            <summary>
            Create an x:data form from the given message stanza.
            </summary>
            <param name="parent">Original stanza</param>
        </member>
        <member name="M:muzzle.XDataForm.#ctor(jabber.protocol.client.IQ)">
            <summary>
            Create an x:data form from the given iq stanza.
            </summary>
            <param name="parent">Original stanza</param>
        </member>
        <member name="M:muzzle.XDataForm.#ctor(jabber.protocol.x.Data)">
            <summary>
            Create an x:data form from the given XML form description
            </summary>
            <param name="x">x:data form to render</param>
        </member>
        <member name="M:muzzle.XDataForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.XDataForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.XDataForm.GetResponse">
            <summary>
            Get a response to the original stanza that caused this form to be popped up.
            </summary>
            <returns>A stanza ready to be sent back to the originator.</returns>
        </member>
        <member name="M:muzzle.XDataForm.FillInResponse(jabber.protocol.x.Data)">
            <summary>
            Modify the given x:data element to contain the response data.
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:muzzle.ComponentLogin">
             <summary>
             A login form for client connections.
             </summary>
             <example>
             ComponentLogin l = new ComponentLogin(jc);
            
             if (l.ShowDialog(this) == DialogResult.OK)
             {
                 jc.Connect();
             }
             </example>
        </member>
        <member name="M:muzzle.ComponentLogin.#ctor">
            <summary>
            Create a Client Login dialog box
            </summary>
        </member>
        <member name="M:muzzle.ComponentLogin.Login(jabber.server.JabberService,System.String)">
            <summary>
            Log in to the server
            </summary>
            <param name="service">The JabberClient instance to connect</param>
            <param name="propertyFile">The name of an XML file to store properties in.</param>
            <returns>True if the user clicked OK, false on cancel</returns>
        </member>
        <member name="M:muzzle.ComponentLogin.#ctor(jabber.server.JabberService)">
            <summary>
            Create a Client Login dialog box that manages a component
            </summary>
            <param name="service">The component to manage</param>
        </member>
        <member name="M:muzzle.ComponentLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:muzzle.ChartStyle">
            <summary>
            How should the chart be rendered?
            </summary>
        </member>
        <member name="F:muzzle.ChartStyle.Bar">
            <summary>
            Bar char
            </summary>
        </member>
        <member name="F:muzzle.ChartStyle.Line">
            <summary>
            Lines
            </summary>
        </member>
        <member name="F:muzzle.ChartStyle.Point">
            <summary>
            Points
            </summary>
        </member>
        <member name="T:muzzle.StripChart">
            <summary>
            A StripChart is a scrolling window showing a set number of data points.
            As new points are added, old points get shifted along.
            </summary>
        </member>
        <member name="F:muzzle.StripChart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:muzzle.StripChart.#ctor">
            <summary>
            Create a stripchart.
            </summary>
        </member>
        <member name="M:muzzle.StripChart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.StripChart.AddPoint(System.Single)">
            <summary>
            Add a point to the strip chart.  If more than the history size are already
            in the chart, extras are dropped.
            </summary>
            <param name="val">The value to add</param>
        </member>
        <member name="M:muzzle.StripChart.Clear">
            <summary>
            Clear all of the points from the chart
            </summary>
        </member>
        <member name="M:muzzle.StripChart.SaveTo(System.String)">
            <summary>
            Save the current image to the specified filename.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:muzzle.StripChart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.StripChart.OnResize(System.EventArgs)">
            <summary>
            The control has been resized.  Redraw.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:muzzle.StripChart.OnLoad(System.EventArgs)">
            <summary>
            Control has been loaded.  Redraw.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:muzzle.StripChart.ShowLastValue">
            <summary>
            Display the last value sent to the chart, in the upper right.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.ShowStatistics">
            <summary>
            Display the mean and standard deviation, graphically.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Title">
            <summary>
            Title to display in the chart.  Null for none.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.PointSize">
            <summary>
            The size of points, when in point style.  Ignored otherwise.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Style">
            <summary>
            Chart drawing style.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Min">
            <summary>
            Initial minimum value shown
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Max">
            <summary>
            Initial maximum value shown
            </summary>
        </member>
        <member name="P:muzzle.StripChart.AutoScale">
            <summary>
            Reset min and max as necessary to show all points.
            This must be set before adding any points.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Labels">
            <summary>
            Draw labels with min and max of chart.  Useful with AutoSize set to true.
            </summary>
        </member>
        <member name="P:muzzle.StripChart.ZeroLine">
            <summary>
            Draw a line at zero?
            </summary>
        </member>
        <member name="P:muzzle.StripChart.History">
            <summary>
            Number of points to show
            </summary>
        </member>
        <member name="P:muzzle.StripChart.TextColor">
            <summary>
            Color to draw the min/max value in, if Labels is true
            </summary>
        </member>
        <member name="P:muzzle.StripChart.ZeroColor">
            <summary>
            Color to draw zero line in, if ZeroLine is true
            </summary>
        </member>
        <member name="P:muzzle.StripChart.StatsColor">
            <summary>
            Color to draw the min/max value in, if Labels is true
            </summary>
        </member>
        <member name="P:muzzle.StripChart.ForeColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:muzzle.StripChart.BackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:muzzle.StripChart.Last">
            <summary>
            The last value inserted into the chart.
            </summary>
        </member>
        <member name="T:muzzle.StreamControl">
            <summary>
            A UserControl that references an XmppStream.
            </summary>
        </member>
        <member name="F:muzzle.StreamControl.m_stream">
            <summary>
            The XmppStream for this control.  Set at design time when a subclass control is dragged onto a form.
            </summary>
        </member>
        <member name="M:muzzle.StreamControl.Write(System.Xml.XmlElement)">
            <summary>
            Write the specified stanza to the stream.
            </summary>
            <param name="elem"></param>
        </member>
        <member name="M:muzzle.StreamControl.BeginIQ(jabber.protocol.client.IQ,jabber.connection.IqCB,System.Object)">
            <summary>
             Does an asynchronous IQ call.
             If the from address hasn't been set, and an OverrideFrom has been set,
             the from address will be set to the value of OverrideFrom.
            </summary>
            <param name="iq">IQ packet to send.</param>
            <param name="cb">Callback to execute when the result comes back.</param>
            <param name="cbArg">Arguments to pass to the callback.</param>
        </member>
        <member name="E:muzzle.StreamControl.OnStreamChanged">
            <summary>
            The XmppStream was changed.  Often at design time.  The object will be this StreamControl.
            </summary>
        </member>
        <member name="P:muzzle.StreamControl.Stream">
            <summary>
            The JabberClient or JabberService to hook up to.
            </summary>
        </member>
        <member name="P:muzzle.StreamControl.OverrideFrom">
            <summary>
            Override the from address that will be stamped on outbound packets.
            Unless your server implemets XEP-193, you shouldn't use this for 
            client connections.
            </summary>
        </member>
        <member name="T:muzzle.InputBox">
            <summary>
            A generic input getter dialog.
            </summary>
        </member>
        <member name="F:muzzle.InputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:muzzle.InputBox.#ctor">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:muzzle.InputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:muzzle.InputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.InputBox.ShowDialog(System.String,System.String,System.String)">
            <summary>
            Pop up the input box with the given parameters
            </summary>
            <param name="title">The text of the window title</param>
            <param name="prompt">Prompt value.  Include colon if desired.</param>
            <param name="defaultValue">Initial value of the input box</param>
            <returns></returns>
        </member>
        <member name="P:muzzle.InputBox.Value">
            <summary>
            The value entered by the user
            </summary>
        </member>
        <member name="T:muzzle.ClientLogin">
             <summary>
             A login form for client connections.
             </summary>
             <example>
             ClientLogin l = new ClientLogin(jc);
            
             if (l.ShowDialog(this) == DialogResult.OK)
             {
                 jc.Connect();
             }
             </example>
        </member>
        <member name="F:muzzle.ClientLogin.tpBasic">
            <summary>
            The basic configuration tab.
            </summary>
        </member>
        <member name="M:muzzle.ClientLogin.#ctor">
            <summary>
            Create a Client Login dialog box
            </summary>
        </member>
        <member name="M:muzzle.ClientLogin.Login(jabber.client.JabberClient,System.String)">
            <summary>
            Log in to the server
            </summary>
            <param name="cli">The JabberClient instance to connect</param>
            <param name="propertyFile">The name of an XML file to store properties in.</param>
            <returns>True if the user clicked OK, false on cancel</returns>
        </member>
        <member name="M:muzzle.ClientLogin.#ctor(jabber.client.JabberClient)">
            <summary>
            Create a Client Login dialog box than manages the connection properties of a particular client
            connection.
            </summary>
            <param name="cli">The client connection to modify</param>
        </member>
        <member name="M:muzzle.ClientLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:muzzle.XmppDebugger">
            <summary>
            Debug stream for XMPP, so I don't have write it every time.
            </summary>
        </member>
        <member name="F:muzzle.XmppDebugger.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:muzzle.XmppDebugger.#ctor">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:muzzle.XmppDebugger.WriteError(System.String)">
            <summary>
            Write an error to the log.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:muzzle.XmppDebugger.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:muzzle.XmppDebugger.Clear">
            <summary>
            Clear both text boxes
            </summary>
        </member>
        <member name="M:muzzle.XmppDebugger.Write(System.String,System.String)">
            <summary>
            Write other text to the debug log
            </summary>
            <param name="tag">The tag to prefix with</param>
            <param name="text">The text after the tag</param>
        </member>
        <member name="M:muzzle.XmppDebugger.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.SendColor">
            <summary>
            What color to use for the "SEND:" string.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.ReceiveColor">
            <summary>
            What color to use for the "RECV:" string.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.ErrorColor">
            <summary>
            What color to use for the "ERROR:" string.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.TextColor">
            <summary>
            What color to use for the sent and received text.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.OtherColor">
            <summary>
            What color to use for other text inserted
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.MaxLines">
            <summary>
            Maximum number of lines to keep
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.SendPrefix">
            <summary>
            The string to prefix on sent bytes.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.ReceivePrefix">
            <summary>
            The string to prefix on sent bytes.
            </summary>
        </member>
        <member name="P:muzzle.XmppDebugger.ErrorPrefix">
            <summary>
            The string to prefix on errors.
            </summary>
        </member>
        <member name="T:muzzle.RosterTree">
            <summary>
            A TreeView optimized for showing Jabber roster items.  Make sure that the
            form you drop this on has a JabberClient, a PresenceManager, and a RosterManager
            on the form first, and this widget will automatically connect to them.
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.#ctor">
            <summary>
            Create a new RosterTree
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.AddGroup(System.String)">
            <summary>
            Add a new, empty group, if this group doesn't exist, otherwise a no-op.
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:muzzle.RosterTree.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            After a group node is expanded, change to the down-triangle image.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:muzzle.RosterTree.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            After a group node is collapsed, change to the right-triangle image.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:muzzle.RosterTree.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            When mousing over a node, show a tooltip with the full JID.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:muzzle.RosterTree.RosterManager">
            <summary>
            The RosterManager for this view
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.PresenceManager">
            <summary>
            The PresenceManager for this view
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.Client">
            <summary>
            The PresenceManager for this view
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.StatusColor">
            <summary>
            Color to draw status text with.  Not applicable until .Net 2.0.
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.DrawStatus">
            <summary>
            Should we draw status text next to each roster item?  Not applicable until .Net 2.0.
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.Groups">
            <summary>
            The group names for the roster
            </summary>
        </member>
        <member name="T:muzzle.RosterTree.GroupNode">
            <summary>
            A TreeNode to hold a Roster Group
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.GroupNode.#ctor(jabber.protocol.iq.Group)">
            <summary>
            Create a GroupNode
            </summary>
            <param name="rg"></param>
        </member>
        <member name="P:muzzle.RosterTree.GroupNode.GroupName">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.GroupNode.Total">
            <summary>
            Total number of members of the group
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.GroupNode.Current">
            <summary>
            Current number of online members of the group
            </summary>
        </member>
        <member name="T:muzzle.RosterTree.ItemNode">
            <summary>
            A TreeNode to hold a RosterItem
            </summary>
        </member>
        <member name="M:muzzle.RosterTree.ItemNode.#ctor(jabber.protocol.iq.Item)">
            <summary>
            Create an ItemNode
            </summary>
            <param name="ri">The roster item to create from</param>
        </member>
        <member name="M:muzzle.RosterTree.ItemNode.ChangePresence(jabber.protocol.client.Presence)">
            <summary>
            Update this roster item with new presence information
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:muzzle.RosterTree.ItemNode.JID">
            <summary>
            The JID of this Roster Item
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.ItemNode.Nickname">
            <summary>
            Roster nickname for this user.
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.ItemNode.Status">
            <summary>
            Last presence status for this item
            </summary>
        </member>
        <member name="P:muzzle.RosterTree.ItemNode.Item">
            <summary>
            The roster item.  Please make a clone before using it.
            </summary>
        </member>
    </members>
</doc>
